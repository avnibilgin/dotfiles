

# --------------------------------------------------------
# Define Status Bar
# --------------------------------------------------------
try:
    wm_bar = Path(home + "/.cache/.qtile_bar_x11.sh").read_text().replace("\n", "")
except:
    wm_bar = "qtile"


logger.warning("Status bar: " + wm_bar)


# --------------------------------------------------------
# Setup Widget Defaults
# --------------------------------------------------------

widget_defaults = dict(
    font="Fira Sans SemiBold",
    fontsize=12,
    padding=3
)
extension_defaults = widget_defaults.copy()

# --------------------------------------------------------
# Decorations
# https://qtile-extras.readthedocs.io/en/stable/manual/how_to/decorations.html
# --------------------------------------------------------

decor_left = {
    "decorations": [
        PowerLineDecoration(
            # path="arrow_left"
            # path="rounded_left"
            # path="forward_slash"
            path="back_slash"
        )
    ],
}

decor_right = {
    "decorations": [
        PowerLineDecoration(
            # path="arrow_right"
            # path="rounded_right"
            # path="forward_slash"
            path="back_slash"
        )
    ],
}

# --------------------------------------------------------
# Widgets
# --------------------------------------------------------

widget_list = [
    widget.TextBox(
        **decor_left,
        background=Color1+".4",
        text='APPS',
        foreground='ffffff',
        desc='',
        padding=10,
        mouse_callbacks={
        "Button1": lambda: qtile.spawn(home + "/.config/jgmenu/qtile/menu-launcher.sh"),
        "Button2": lambda: qtile.spawn(home + "/.config/jgmenu/qtile/apps-menu.sh"),
        "Button3": lambda: qtile.spawn("rofi -show drun")},
    ),
    widget.TextBox(
        **decor_left,
        background="#ffffff.4",
        text="",
        foreground="000000.6",
        fontsize=16,
        mouse_callbacks={"Button1": lambda: qtile.spawn(file)},
    ),
    widget.TextBox(
        **decor_left,
        background="#ffffff.4",
        text="",
        foreground="000000.6",
        fontsize=16,
        mouse_callbacks={"Button1": lambda: qtile.spawn(browser)},
    ),
    widget.TextBox(
        **decor_left,
        background="#ffffff.4",
        text="",
        foreground="000000.6",
        fontsize=16,
        mouse_callbacks={"Button1": lambda: qtile.spawn(terminal)},
    ),
    widget.TextBox(
        **decor_left,
        background="#ffffff.4",
        text="",
        foreground="000000.6",
        fontsize=16,
        mouse_callbacks={"Button1": lambda: qtile.spawn(editor)},
    ),
    widget.GroupBox(
        **decor_left,
        background="#ffffff.7",
        highlight_method='block',
        highlight='ffffff',
        block_border='ffffff',
        highlight_color=['ffffff','ffffff'],
        block_highlight_text_color='000000',
        foreground='ffffff',
        rounded=True,
        this_current_screen_border='ffffff',
        active='ffffff'
    ),
    widget.WindowName(
        **decor_left,
        max_chars=50,
        background=Color2+".4",
        width=400,
        padding=10
    ),
    widget.TaskList(
        **decor_left,
        background="#000000.3",
        theme_path="/usr/share/icons/Papirus",
        theme_mode="preferred",
        icon_size=18,
        highlight_method="block",
        borderwidth=0,
        border="000000.0",
        title_width_method="uniform",
        max_title_width=25,
        parse_text=entferne_titeltext,
    ),
    widget.Spacer(),
    widget.Spacer(
        length=30
    ),
    widget.TextBox(
        **decor_right,
        background="#000000.3"
    ),
    widget.Memory(
        **decor_right,
        background=Color10+".4",
        padding=10,
        measure_mem='M',
        format="{MemUsed:.0f} MB"
    ),
    widget.Volume(
        **decor_right,
        background=Color12+".4",
        padding=10,
        fmt="<span size='11pt'> </span> {}",
        mouse_callbacks={"Button3": lambda: qtile.spawn("pavucontrol -t 0")},
    ),
    widget.GenPollText(
        **decor_right,
        background=Color12+".4",
        padding=5,
        fmt=" <span size='9pt'> {} </span>",
        fontsize=16,
        func=lambda: subprocess.check_output([home + "/.config/qtile/scripts/qtile-bluetooth-name.sh"]).decode('utf-8').strip(),
        update_interval=10,
        mouse_callbacks={"Button1": lambda: qtile.spawn(home + "/.config/jgmenu/qtile/bluetooth-menu/bluetooth-menu.sh")},
    ),
    widget.GenPollCommand(
        **decor_right,
        cmd=(home + "/.config/qtile/scripts/qtile-ddc-module-steps.sh show"),
        #cmd=(home + "/.config/qtile/scripts/qtile-ddc-module.sh"),
        fmt=" <span size='9pt'> {}% </span>",
        update_interval=1,
        shell=True,
        background=Color12+".4",
        padding=5,
        fontsize=16,
            mouse_callbacks={
        "Button1": lazy.spawn(home + "/.config/qtile/scripts/qtile-ddc-module-steps.sh min"),
        "Button3": lazy.spawn(home + "/.config/qtile/scripts/qtile-ddc-module-steps.sh max"),
        "Button4": lazy.spawn(home + "/.config/qtile/scripts/qtile-ddc-module-steps.sh plus"),
        "Button5": lazy.spawn(home + "/.config/qtile/scripts/qtile-ddc-module-steps.sh minus"),
        },
    ),
    widget.Wlan(
        **decor_right,
        interface="wlp0s29u1u7",
        background=Color2+".4",
        width=65,
        padding=10,
        format="<span size='11pt'>󱚹 </span> {percent:2.0%}",
        mouse_callbacks={"Button1": lambda: qtile.spawn("alacritty -e nmtui")},
    ),
    widget.Clock(
        **decor_right,
        background=Color4+".4",
        padding=10,
        format="%a, %e. %b.  %R",
    ),
    widget.GenPollCommand(
        **decor_right,
        cmd=(home + "/.config/qtile/scripts/qtile-timer.sh"),
        update_interval=1,
        background=Color4+".4",
        width=36,
        padding=5,
        mouse_callbacks={
        "Button1": lazy.spawn(home + "/.config/qtile/scripts/qtile-timer-steps.sh date30set"),
        "Button2": lazy.spawn(home + "/.config/qtile/scripts/qtile-timer-steps.sh date1set"),
        "Button3": lazy.spawn(home + "/.config/qtile/scripts/qtile-timer-steps.sh readyset"),
        "Button4": lazy.spawn(home + "/.config/qtile/scripts/qtile-timer-steps.sh up"),
        "Button5": lazy.spawn(home + "/.config/qtile/scripts/qtile-timer-steps.sh down"),
        },
    ),
    widget.CheckUpdates(
        **decor_right,
        background=Color2+".4",
        distro = "Arch_checkupdates",
		display_format = " <span size='9pt'> {updates} </span>",
        execute="pamac-manager --updates",
		update_interval = 900,
		colour_have_updates = 'bf616a',
		colour_no_updates = 'ffffff',
        no_update_string = '',
        padding=5,
        fontsize=16,
    ),
    widget.GenPollCommand(
        **decor_right,
        cmd=(home + "/.config/qtile/scripts/qtile-dunst.sh"),
        update_interval=1,
        background=Color2+".4",
        padding=5,
        fontsize=16,
        mouse_callbacks={
        "Button1": lambda: qtile.spawn("dunstctl set-paused toggle"),
        "Button4": lambda: qtile.spawn("dunstctl close"),
        "Button5": lambda: qtile.spawn("dunstctl history-pop"),
        },
    ),
    # ~ widget.GenPollCommand(
        # ~ **decor_right,
        # ~ cmd=(home + "/.config/qtile/scripts/qtile-update.sh"),
        # ~ update_interval=1,
        # ~ background=Color2+".4",
        # ~ padding=5,
        # ~ fontsize=16,
        # ~ mouse_callbacks={
        # ~ "Button1": lambda: qtile.spawn(home + "/.config/qtile/scripts/qtile-update.sh up"),
        # ~ },
    # ~ ),
    widget.TextBox(
        **decor_right,
        background=Color2+".4",
        padding=5,
        text="󰅍",
        fontsize=16,
        mouse_callbacks={"Button1": lambda: qtile.spawn("xdotool key Alt_L+Down")},
    ),
    widget.TextBox(
        **decor_right,
        background=Color2+".4",
        padding=5,
        text=" ",
        fontsize=14,
        mouse_callbacks={
        "Button1": lambda: qtile.spawn(home + "/.config/jgmenu/qtile/exit-menu/exit-menu.sh"),
        "Button3": lambda: qtile.spawn(home + "/.config/rofi/powermenu/type-1/powermenu.sh")},
    ),
]



                Bar-Höhe= 30,
                padding=20,
                opacity=0.7,
                border_width=[0, 0, 0, 0],
                margin=[0,0,0,0],
                background="#000000.3",
